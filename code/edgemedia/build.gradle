plugins {
    id 'com.android.library'
    id "jacoco"
    id 'com.diffplug.spotless'
    id 'kotlin-android'
}

apply from: 'release.gradle'
apply from: '../codeformat.gradle'
apply from: '../checkstyle.gradle'

android {
    namespace = 'com.adobe.marketing.mobile.edge.media'

    compileSdk rootProject.ext.targetSdkVersion

    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion

        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    flavorDimensions = ["target"]

    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.sourceCompatibility
        languageVersion = rootProject.kotlinLanguageVersion
        apiVersion = rootProject.kotlinLanguageVersion
    }
}

dependencies {
    //noinspection GradleDependency
    implementation "com.adobe.marketing.mobile:core:$mavenCoreVersion"
    implementation "androidx.annotation:annotation:$androidxAnnotationVersion"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.20'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
    //noinspection GradleDependency

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "com.adobe.marketing.mobile:edge:$mavenEdgeVersion"
    androidTestImplementation "com.adobe.marketing.mobile:edgeidentity:2.+"
    androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7'
}

tasks.withType(Test).configureEach {
    testLogging {
        showStandardStreams = true
    }
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.register('unitTestsCoverageReport', JacocoReport) {
    dependsOn "testPhoneDebugUnitTest"
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/phoneDebug", excludes: excludeRegex)
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))

    def mainSrc = "${project.projectDir}/src/main/java"
    def phoneSrc = "${project.projectDir}/src/phone/java"
    sourceDirectories.setFrom files([mainSrc, phoneSrc])

    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/testPhoneDebugUnitTest.exec",
    ])

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

tasks.register('functionalTestsCoverageReport', JacocoReport) {
    dependsOn "createPhoneDebugCoverageReport"
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/phoneDebug", excludes: excludeRegex)
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))

    def mainSrc = "${project.projectDir}/src/main/java"
    def phoneSrc = "${project.projectDir}/src/phone/java"
    sourceDirectories.setFrom files([mainSrc, phoneSrc])

    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}
